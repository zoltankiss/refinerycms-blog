<%= render 'refinery/admin/search_header', :url => request.path %>
<%
 # fixme: hack :(
%>
<% self.class.send :include, Refinery::Blog::PostsHelper %>

<%
  links = {
    'posts' => [
      ['.posts.manage', refinery.blog_admin_posts_path],
      ['.posts.uncategorized', refinery.uncategorized_blog_admin_posts_path],
      ['.posts.new', refinery.new_blog_admin_post_path],
    ],
    'comments' => [
      ['.comments.new', refinery.blog_admin_comments_path],
      ['.comments.approved', refinery.approved_blog_admin_comments_path],
      ['.comments.rejected', refinery.rejected_blog_admin_comments_path],
    ],
    'categories' => [
      ['.categories.manage', refinery.blog_admin_categories_path],
      ['.categories.new', refinery.new_blog_admin_category_path],
    ],
    'settings' => [
      ['.settings.title', refinery.blog_admin_settings_path],
      ['.settings.comments', refinery.comments_blog_admin_settings_path],
      ['.settings.moderation', refinery.moderation_blog_admin_settings_path],
      ['.settings.update_notified', refinery.notification_recipients_blog_admin_settings_path(:dialog => true, :height => 400)],
      ['.settings.teasers', refinery.teasers_blog_admin_settings_path],
    ]
  }
%>

<div align="right">
  <link rel="stylesheet" href="//code.jquery.com/ui/1.11.2/themes/smoothness/jquery-ui.css">

  <script>
    $(function() {
      var availableItems = [
        <% Refinery::Blog::Category.pluck(:title).each do |title| %>
          <%= raw "\"#{title} (category)\"," %>
        <% end %>
        <% Refinery::Blog::Post.pluck(:title).each do |title| %>
          <%= raw "\"#{title} (post)\"," %>
        <% end %>
      ]
      function split( val ) {
        return val.split( /,\s*/ );
      }
      function extractLast( term ) {
        return split( term ).pop();
      }

      $( "#search" )
        // don't navigate away from the field on tab when selecting an item
        .bind( "keydown", function( event ) {
          if ( event.keyCode === $.ui.keyCode.TAB &&
              $( this ).autocomplete( "instance" ).menu.active ) {
            event.preventDefault();
          }
        })
        .autocomplete({
          minLength: 0,
          source: function( request, response ) {
            // delegate back to autocomplete, but extract the last term
            response( $.ui.autocomplete.filter(
              availableItems, extractLast( request.term ) ) );
          },
          focus: function() {
            // prevent value inserted on focus
            return false;
          },
          select: function( event, ui ) {
            $.get("ajax_search", { term: ui.item.value }).done(function( data ) {
              $('#records').html(data);
            });
          }
        });
    });
  </script>

  <div class="ui-widget">
    <input id="search" size="50">
  </div>
</div>

<%= link_to 'tree view', url_with_updated_param(request.fullpath, { 'view' => 'tree' }) %>&nbsp;
<%= link_to 'sequential view', url_with_updated_param(request.fullpath, { 'view' => 'sequential' }) %>&nbsp;|&nbsp;

<% links.each do |category, links| %>
  <strong><%= category %></strong>:
  <% links.each do |link, path| %>
    <%= link_to t(link).gsub('i18n:', ''), path %>&nbsp;
  <% end %>
<% end %>

<br /><br />

<div id='records'>
  <% if @posts.any? %>
    <%= will_paginate @posts %>

    <%= render "sortable_list" %>

    <%= will_paginate @posts %>
  <% else %>
    <% if searching? %>
      <%= t('no_results', :scope => 'refinery.admin.search') %>
    <% else %>
      <p>
        <strong>
          <%= t('.no_items_yet', :create => t('new', :scope => 'refinery.blog.admin.submenu.posts')) %>
        </strong>
      </p>
    <% end %>
  <% end %>
</div>
